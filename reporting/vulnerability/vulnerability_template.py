# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Guardian. If not, see <https://www.gnu.org/licenses/>.

import uuid
import inspect
from datetime import datetime
from typing import Dict, Set, List
from sqlmodel import Field, SQLModel, Relationship
from pydantic import BaseModel, Field as PydanticField, ConfigDict, AliasChoices, computed_field
from sqlalchemy import UniqueConstraint, Column, ForeignKey
from sqlalchemy.sql import func
from sqlalchemy.orm import backref
from schema.util import multi_language_field_model_validator
from schema.reporting import VulnerabilityBase, TemplateStatus
from schema.reporting.vulnerability.rating import Rating
from schema.reporting.vulnerability.measure import Measure, MeasureLookup
from schema.reporting.report_language import ReportLanguage
from schema.tagging import Tag, TagLookup, TagVulnerabilityTemplateGeneral, TagReport
from schema.tagging.bugcrowd_vrt import Vrt, VrtReport, VrtLookup
from schema.tagging.mitre_cwe import CweWeakness, CweLookup, CweReport
from schema.reporting.vulnerability.test_procedure import TestProcedure
from schema.reporting.vulnerability.test_procedure_vulnerability_template import TestProcedureVulnerabilityTemplate

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


class VulnerabilityTemplateMeasure(SQLModel, table=True):
    """
    Mapping table between vulnerability templates and measures.
    """
    vulnerability_id: uuid.UUID = Field(
        sa_column=Column(ForeignKey("vulnerabilitytemplate.id", ondelete="CASCADE"), primary_key=True)
    )
    measure_id: uuid.UUID = Field(
        sa_column=Column(ForeignKey("measure.id", ondelete="CASCADE"), primary_key=True)
    )
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # Relationship definitions
    vulnerability_template: List["VulnerabilityTemplate"] = Relationship(
        sa_relationship_kwargs=dict(backref=backref("measure_mappings",
                                                    cascade="delete, delete-orphan",
                                                    overlaps="vulnerability_templates,measures"),
                                    overlaps="vulnerability_templates,measures")
    )
    measure: List["Measure"] = Relationship(
        sa_relationship_kwargs=dict(backref=backref("vulnerability_template_mappings",
                                                    cascade="delete, delete-orphan",
                                                    overlaps="vulnerability_templates,measures"),
                                    overlaps="vulnerability_templates,measures")
    )


class VulnerabilityTemplateLanguage(SQLModel, table=True):
    """
    This is the schema for managing language-specific fields for vulnerability templates.
    """
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    title: str = Field(unique=True)
    description: str | None = Field()
    observation: str | None = Field()
    # Foreign keys
    language_id: uuid.UUID = Field(foreign_key="reportlanguage.id")
    vulnerability_id: uuid.UUID = Field(
        sa_column=Column(ForeignKey("vulnerabilitytemplate.id", ondelete="CASCADE"), nullable=False)
    )
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # All relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    language: ReportLanguage = (
        Relationship(sa_relationship_kwargs=dict(foreign_keys="[VulnerabilityTemplateLanguage.language_id]"),
                     back_populates="vulnerability_template_details")
    )
    vulnerability: "VulnerabilityTemplate" = (
        Relationship(sa_relationship_kwargs=dict(foreign_keys="[VulnerabilityTemplateLanguage.vulnerability_id]"),
                     back_populates="multi_language_fields")
    )

    __table_args__ = (
        UniqueConstraint('language_id', 'vulnerability_id'),
        UniqueConstraint('title', 'language_id')
    )


class VulnerabilityTemplate(VulnerabilityBase, table=True):
    """
    Store information about a vulnerability template.
    """
    status: TemplateStatus = Field(sa_column_kwargs=dict(server_default=TemplateStatus.draft.name))
    # If True, then the vulnerability can be automatically verified and documented.
    automate: bool = Field(default=False, sa_column_kwargs=dict(server_default="false"))
    # Provides some testing hints for the tester
    # Relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    multi_language_fields: List[VulnerabilityTemplateLanguage] = Relationship(
        sa_relationship_kwargs=dict(cascade="all,delete,delete-orphan"),
        back_populates="vulnerability"
    )
    general_tags: List[Tag] = Relationship(
        back_populates="vulnerability_templates_general",
        link_model=TagVulnerabilityTemplateGeneral
    )
    ratings: List[Rating] = Relationship(
        back_populates="vulnerability_template",
        sa_relationship_kwargs=dict(cascade="all,delete,delete-orphan")
    )
    # All relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    vrt: Vrt | None = Relationship(back_populates="vulnerability_templates")
    cwe_weakness: CweWeakness | None = Relationship()
    procedures: List[TestProcedure] = Relationship(
        back_populates="vulnerabilities",
        link_model=TestProcedureVulnerabilityTemplate
    )
    vulnerabilities: List["Vulnerability"] = Relationship(back_populates="source_template")
    measures: List[Measure] = Relationship(
        sa_relationship_kwargs=dict(
            secondary="vulnerabilitytemplatemeasure",
            back_populates="vulnerability_templates"
        )
    )

    def _get_language(self, language: ReportLanguage, raise_not_found: bool = False) \
            -> VulnerabilityTemplateLanguage | None:
        """
        Returns the correct TestProcedureLanguage object based on the given ReportLanguage object.
        """
        result = [item for item in self.multi_language_fields if item.language_id == language.id]
        if not result and raise_not_found:
            raise ValueError()
        return result[0] if result else None

    def get_title(self, language: ReportLanguage,  default: str = None):
        result = self._get_language(language)
        return result.title if result else default

    def get_description(self, language: ReportLanguage,  default: str = None):
        result = self._get_language(language)
        return result.description if result else default

    def get_observation(self, language: ReportLanguage,  default: str = None):
        result = self._get_language(language)
        return result.observation if result else default


class VulnerabilityTemplateCreateUpdateBase(BaseModel):
    """
    This is the base schema for updating or creating a vulnerability template.
    """
    references: str | None = None
    automate: bool


class VulnerabilityTemplateCreate(VulnerabilityTemplateCreateUpdateBase):
    """
    This is the schema for creating, reading and updating a vulnerability template via FastAPI.
    """
    # Text fields for describing the vulnerability
    title: Dict[str, str]
    description: Dict[str, str]
    observation: Dict[str, str]
    measure_ids: Set[uuid.UUID] | None = PydanticField(default=set(), alias="measures")
    general_tags: List[uuid.UUID] | None = PydanticField(default=[])
    vrt_id: uuid.UUID | None = PydanticField(
        default=None,
        serialization_alias="vrt",
        validation_alias=AliasChoices("vrt_id", "vrt"),
    )
    cwe_weakness_id: uuid.UUID | None = PydanticField(
        default=None,
        serialization_alias="cwe_weakness",
        validation_alias=AliasChoices("cwe_weakness_id", "cwe_weakness"),
    )

    def __eq__(self, other: "VulnerabilityTemplateCreate") -> bool:
        return (
            self.title == other.title
            and self.description == other.description
            and self.observation == other.observation
            and self.measure_ids == other.measure_ids
            and self.general_tags == other.general_tags
            and self.vrt_id == other.vrt_id
            and self.cwe_weakness_id == other.cwe_weakness_id
        )


class VulnerabilityTemplateUpdate(VulnerabilityTemplateCreate):
    """
    This is the schema for updating a vulnerability template via FastAPI.
    """
    id: uuid.UUID


class VulnerabilityTemplateRead(VulnerabilityTemplateCreateUpdateBase):
    """
    This is the schema for reading a vulnerability template via FastAPI.
    """
    model_config = ConfigDict(from_attributes=True)
    id: uuid.UUID
    multi_language_fields: List[VulnerabilityTemplateLanguage] = PydanticField(exclude=True)
    measure_ids: List[MeasureLookup] | None = PydanticField(
        default=set(),
        serialization_alias="measures",
        validation_alias=AliasChoices("measure_ids", "measures"),
    )
    general_tags: List[TagLookup] | None = PydanticField(default=[])
    vrt: VrtLookup | None = PydanticField(
        default=None,
    )
    cwe_weakness: CweLookup | None = PydanticField(
        default=None,
    )
    ratings: List[Rating] | None = PydanticField(default=[], exclude=True)

    @computed_field
    def title(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())

    @computed_field
    def description(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())

    @computed_field
    def observation(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())

    @computed_field
    def rating_count(self) -> int:
        return len(self.ratings)


class VulnerabilityTemplateResponse(VulnerabilityTemplateCreate):
    """
    This is the schema for reading a vulnerability template via FastAPI.
    """
    id: uuid.UUID

    def __eq__(self, other: "VulnerabilityTemplateResponse") -> bool:
        return super().__eq__(other) and self.id == other.id


class VulnerabilityTemplateReport(BaseModel):
    """
    Schema for creating the final JSON object based on which the report is created.
    """
    model_config = ConfigDict(from_attributes=True)
    id: uuid.UUID
    status: TemplateStatus = PydanticField()
    automate: bool = PydanticField()
    vrt: VrtReport | None = PydanticField(default=None)
    cwe_weakness: CweReport | None = PydanticField(default=None)
    general_tags: List[TagReport] | None = PydanticField(default=[])
