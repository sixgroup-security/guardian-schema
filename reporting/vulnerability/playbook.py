# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import inspect
from datetime import datetime
from typing import Dict, List
from sqlmodel import Field, SQLModel, Relationship
from sqlalchemy import UniqueConstraint, Column, ForeignKey
from pydantic import BaseModel, Field as PydanticField, ConfigDict, computed_field, field_validator
from sqlalchemy.sql import func
from sqlalchemy.dialects import postgresql
from schema.util import ProjectType, multi_language_field_model_validator
from schema.reporting import TemplateStatus
from schema.reporting.report_language import ReportLanguage
from schema.reporting.vulnerability.test_procedure import TestProcedure
from schema.reporting.vulnerability.test_procedure_playbook import TestProcedurePlaybook

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


class CommonInputFields(SQLModel):
    title: str = Field()
    description: str = Field()


class PlaybookLanguage(CommonInputFields, table=True):
    """
    This is the schema for managing language-specific fields for playbooks.
    """
    __tablename__ = "testguidelanguage"
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    # Foreign keys
    language_id: uuid.UUID = Field(foreign_key="reportlanguage.id")
    playbook_id: uuid.UUID = Field(
        sa_column=Column(
            ForeignKey("testguide.id", ondelete="CASCADE"),
            name="test_guide_id",
            nullable=False
        )
    )
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # All relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    language: ReportLanguage = (
        Relationship(
            sa_relationship_kwargs=dict(foreign_keys="[PlaybookLanguage.language_id]"),
            back_populates="playbook_details"
        )
    )
    playbook: "Playbook" = (
        Relationship(
            sa_relationship_kwargs=dict(foreign_keys="[PlaybookLanguage.playbook_id]"),
            back_populates="multi_language_fields"
        )
    )

    __table_args__ = (
        UniqueConstraint('language_id', 'test_guide_id'),
    )


class Playbook(SQLModel, table=True):
    """
    Store information about playbooks
    """
    __tablename__ = "testguide"
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    status: TemplateStatus = Field(sa_column_kwargs=dict(server_default=TemplateStatus.draft.name))
    name: str = Field(index=True)
    project_type: ProjectType = Field()
    structure: List = Field(sa_column=Column(postgresql.JSON()))
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # All relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    multi_language_fields: List[PlaybookLanguage] = Relationship(
        sa_relationship_kwargs=dict(cascade="all,delete,delete-orphan"),
        back_populates="playbook"
    )
    procedures: List[TestProcedure] = Relationship(
        back_populates="playbooks", link_model=TestProcedurePlaybook
    )
    __table_args__ = (
        UniqueConstraint('name', 'project_type'),
    )


class PlaybookCreateUpdateBase(BaseModel):
    """
    This is the base schema for updating or creating a playbook.
    """
    name: str
    title: Dict[str, str] | None = PydanticField(default={})
    description: Dict[str, str] | None = PydanticField(default={})
    structure: List[Dict] | None = PydanticField(default=[])

    @field_validator("structure", mode="before")
    def verify_structure(cls, value):
        return value if value else []

    def __eq__(self, other: "PlaybookCreateUpdateBase") -> bool:
        return (
            self.name == other.name
            and self.title == other.title
            and self.description == other.description
            and self.structure == other.structure
        )


class PlaybookCreate(PlaybookCreateUpdateBase):
    """
    This is the playbook schema for creating, reading and updating a playbook via FastAPI.
    """
    ...


class PlaybookUpdate(PlaybookCreate):
    """
    This is the schema for updating a playbook via FastAPI.
    """
    id: uuid.UUID


class PlaybookRead(BaseModel):
    """
    This is the playbook schema. It is used by the FastAPI to read a playbook.
    """
    model_config = ConfigDict(from_attributes=True)

    id: uuid.UUID
    name: str
    multi_language_fields: List[PlaybookLanguage] = PydanticField(exclude=True)
    procedures: List[TestProcedure] = PydanticField(exclude=True)
    structure: List[Dict] | None = PydanticField(default=[])

    @computed_field
    def test_procedure_count(self) -> int:
        return len(self.procedures)

    @computed_field
    def title(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())

    @computed_field
    def description(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())


class PlaybookLookup(BaseModel):
    """
    This is the schema for looking up playbooks.
    """
    id: uuid.UUID
    name: str


class PlaybookResponse(PlaybookCreate):
    """
    This is the schema for reading a playbook via FastAPI.
    """
    id: uuid.UUID

    def __eq__(self, other: "PlaybookResponse") -> bool:
        return super().__eq__(other) and self.id == other.id
