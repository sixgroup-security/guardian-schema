# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import inspect
from datetime import datetime
from pydantic import BaseModel, Field as PydanticField, ConfigDict, computed_field
from typing import List, Dict, Any
from sqlmodel import Field, SQLModel, Relationship
from sqlalchemy import UniqueConstraint, Column, ForeignKey
from sqlalchemy.sql import func
from schema.util import CVSS_VERSION_REGEX
from schema.util import SeverityType, multi_language_field_model_validator
from schema.reporting.report_language import ReportLanguage

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


class CommonMarkdownFields(SQLModel):
    """
    This is the base class for language-specific information about a rating.
    """
    comment: str = Field()


class RatingLanguage(CommonMarkdownFields, table=True):
    """
    Store language-specific information about a rating
    """
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # Foreign keys
    language_id: uuid.UUID = Field(foreign_key="reportlanguage.id")
    rating_id: uuid.UUID | None = Field(
        sa_column=Column(ForeignKey("rating.id", ondelete="CASCADE"), nullable=False)
    )
    # Relationship definitions
    rating: "Rating" = Relationship(
        sa_relationship_kwargs=dict(foreign_keys="[RatingLanguage.rating_id]"),
        back_populates="multi_language_fields"
    )
    language: ReportLanguage = Relationship(
        sa_relationship_kwargs=dict(
            foreign_keys="[RatingLanguage.language_id]"
        ),
        back_populates="rating_comments"
    )


class RatingBase(SQLModel):
    # Used to cross-reference vulnerabilities
    cvss_score: float | None = None
    cvss_vector: str | None = None
    severity: SeverityType | None = Field(regex=CVSS_VERSION_REGEX)


class Rating(RatingBase, table=True):
    """
    Store information about a vulnerability's rating
    """
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    # A unique name
    name: str = Field(index=True)
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # Foreign keys
    vulnerability_id: uuid.UUID = Field(
        sa_column=Column(ForeignKey("vulnerabilitytemplate.id", ondelete="CASCADE"), nullable=False)
    )
    # Relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    vulnerability_template: "VulnerabilityTemplate" = Relationship(
        sa_relationship_kwargs=dict(foreign_keys="[Rating.vulnerability_id]"),
        back_populates="ratings"
    )
    multi_language_fields: List[RatingLanguage] = Relationship(
        sa_relationship_kwargs=dict(cascade="all,delete,delete-orphan"),
        back_populates="rating"
    )

    __table_args__ = (
        UniqueConstraint('name', 'vulnerability_id'),
    )

    def _get_language(self, language: ReportLanguage, raise_not_found: bool = False) \
            -> RatingLanguage | None:
        """
        Returns the correct TestProcedureLanguage object based on the given ReportLanguage object.
        """
        result = [item for item in self.multi_language_fields if item.language_id == language.id]
        if not result and raise_not_found:
            raise ValueError()
        return result[0] if result else None

    def get_comment(self, language: ReportLanguage,  default: str | None = None) -> str | None:
        result = self._get_language(language)
        return result.comment if result else default


class RatingCreateUpdateBase(BaseModel):
    """
    This is the base class for updating or creating a rating via FastAPI.
    """
    name: str
    # Rating is provided via the REST API path
    cvss_score: float | None = None
    cvss_vector: str | None = None
    severity: SeverityType

    def __eq__(self, other: Any) -> bool:
        return self.dict(by_alias=True) == other.dict(by_alias=True)


class RatingCreate(RatingCreateUpdateBase):
    """
    This is the rating schema for creating a rating via FastAPI.
    """
    comment: Dict[str, str]


class RatingUpdate(RatingCreate):
    """
    This is the schema for updating a rating via FastAPI.
    """
    id: uuid.UUID


class RatingRead(RatingCreateUpdateBase):
    """
    This is the rating schema for reading a rating via FastAPI.
    """
    model_config = ConfigDict(from_attributes=True)

    id: uuid.UUID
    multi_language_fields: List[RatingLanguage] = PydanticField(exclude=True)

    @computed_field
    def comment(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())


class RatingResponse(RatingUpdate):
    ...


class RatingLookup(SQLModel):
    """
    This is the schema for looking up a language-specific rating via FastAPI.
    """
    id: uuid.UUID
    name: str
    cvss_score: float | None = None
    cvss_vector: str | None = None
    severity: SeverityType
    comment: str
