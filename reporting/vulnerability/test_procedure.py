# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import enum
import uuid
import inspect
from datetime import datetime
from typing import Any, Dict, List
from sqlmodel import Field, SQLModel, Relationship
from pydantic import BaseModel, Field as PydanticField, ConfigDict, computed_field
from sqlalchemy import UniqueConstraint, Column, ForeignKey
from sqlalchemy.sql import func
from schema.util import multi_language_field_model_validator
from schema.tagging.tagging import TagTestProcedureGeneral, Tag, TagLookup
from schema.reporting.report_language import ReportLanguage
from schema.reporting.file import File
from schema.reporting.file.test_procedure import TestProcedureFile
from .test_procedure_playbook import TestProcedurePlaybook
from .test_procedure_vulnerability_template import TestProcedureVulnerabilityTemplate

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


class ProcedureType(enum.IntEnum):
    penetration_test = enum.auto()
    attack_modelling = enum.auto()
    purple_red_teaming = enum.auto()


class TestProcedureLanguage(SQLModel, table=True):
    """
    This is the schema for managing language-specific fields for test procedures.
    """
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    objective: str | None = Field()
    # Foreign keys
    language_id: uuid.UUID = Field(foreign_key="reportlanguage.id")
    test_procedure_id: uuid.UUID = Field(
        sa_column=Column(ForeignKey("testprocedure.id", ondelete="CASCADE"), nullable=False)
    )
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # All relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    language: ReportLanguage = (
        Relationship(sa_relationship_kwargs=dict(foreign_keys="[TestProcedureLanguage.language_id]"),
                     back_populates="test_procedure_details")
    )
    test_procedure: "TestProcedure" = (
        Relationship(sa_relationship_kwargs=dict(foreign_keys="[TestProcedureLanguage.test_procedure_id]"),
                     back_populates="multi_language_fields")
    )

    __table_args__ = (
        UniqueConstraint('language_id', 'test_procedure_id'),
    )


class TestProcedure(SQLModel, table=True):
    """
    Store information about a test procedure
    """
    id: uuid.UUID | None = Field(
        primary_key=True,
        index=True,
        sa_column_kwargs=dict(server_default=func.gen_random_uuid())
    )
    # Unique title for test procedures
    name: str = Field(index=True, unique=True)
    # Provides some testing hints for the tester
    hints: str | None = Field()
    procedure_type: ProcedureType = Field()
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: datetime | None = Field(sa_column_kwargs=dict(onupdate=func.now()))
    # Relationship definitions
    # https://github.com/tiangolo/sqlmodel/issues/10
    multi_language_fields: List[TestProcedureLanguage] = Relationship(
        sa_relationship_kwargs=dict(cascade="all,delete,delete-orphan"),
        back_populates="test_procedure"
    )
    playbooks: List["Playbook"] = Relationship(
        back_populates="procedures",
        link_model=TestProcedurePlaybook
    )
    general_tags: List[Tag] = Relationship(back_populates="test_procedure_general", link_model=TagTestProcedureGeneral)
    vulnerabilities: List["VulnerabilityTemplate"] = Relationship(
        back_populates="procedures",
        link_model=TestProcedureVulnerabilityTemplate
    )
    report_procedures: List["ReportProcedure"] = Relationship(back_populates="source_procedure")
    files: List[File] = Relationship(back_populates="test_procedures", link_model=TestProcedureFile)

    def _get_language(self, language: ReportLanguage, raise_not_found: bool = False) -> TestProcedureLanguage | None:
        """
        Returns the correct TestProcedureLanguage object based on the given ReportLanguage object.
        """
        result = [item for item in self.multi_language_fields if item.language_id == language.id]
        if not result and raise_not_found:
            raise ValueError()
        return result[0] if result else None

    def get_objective(self, language: ReportLanguage,  default: str = None):
        result = self._get_language(language)
        return result.objective if result else default


class TestProcedureCreateUpdateBase(BaseModel):
    """
    This is the base schema for updating or creating a test procedure.
    """
    name: str
    hints: str | None = PydanticField(default=None)
    # Text fields for describing the procedure
    objective: Dict[str, str]

    def __eq__(self, other: Any) -> bool:
        return (
            self.name == other.name
            and self.hints == other.hints
            and self.objective == other.objective
        )


class TestProcedureCreate(TestProcedureCreateUpdateBase):
    """
    This is the schema for creating, reading and updating a test procedure via FastAPI.
    """
    general_tags: List[uuid.UUID] | None = PydanticField(default=[])


class TestProcedureUpdate(TestProcedureCreate):
    """
    This is the schema for updating a test procedure via FastAPI.
    """
    id: uuid.UUID


class TestProcedureRead(BaseModel):
    """
    This is the schema for reading a test procedure via FastAPI.
    """
    model_config = ConfigDict(from_attributes=True)

    id: uuid.UUID
    multi_language_fields: List[TestProcedureLanguage] = PydanticField(exclude=True)
    name: str
    hints: str | None = PydanticField(default=None)
    playbooks: List[Any] = PydanticField(exclude=True)
    vulnerabilities: List[Any] = PydanticField(exclude=True)
    general_tags: List[TagLookup] | None = PydanticField(default=[])

    @computed_field
    def playbook_count(self) -> int:
        return len(self.playbooks)

    @computed_field
    def vulnerability_count(self) -> int:
        return len(self.vulnerabilities)

    @computed_field
    def objective(self) -> Dict[str, str]:
        return multi_language_field_model_validator(self, inspect.currentframe())


class TestProcedureResponse(TestProcedureCreate):
    """
    This is the schema for reading a test procedure via FastAPI.
    """
    id: uuid.UUID

    def __eq__(self, other: "TestProcedureResponse") -> bool:
        return super().__eq__(other) and self.id == other.id
