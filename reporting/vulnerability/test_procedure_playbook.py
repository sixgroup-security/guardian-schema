# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
from datetime import datetime
from typing import Optional
from sqlmodel import Field, SQLModel
from sqlalchemy import Column, ForeignKey
from sqlalchemy.sql import func
from schema.reporting.vulnerability import TestPriority

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


class TestProcedurePlaybook(SQLModel, table=True):
    """
    Mapping table between playbooks and test procedures.
    """
    __tablename__ = "testproceduretestguide"
    playbook_id: uuid.UUID = Field(
        sa_column=Column(
            ForeignKey("testguide.id"),
            name="test_guide_id",
            primary_key=True
        )
    )
    procedure_id: uuid.UUID = Field(
        foreign_key="testprocedure.id",
        primary_key=True
    )
    # Defines how important the execution of this procedure is in the current playbook.
    priority: Optional[TestPriority] = Field(sa_column_kwargs=dict(server_default=TestPriority.optional.name))
    # Internal information only
    created_at: datetime = Field(sa_column_kwargs=dict(server_default=func.now()))
    last_modified_at: Optional[datetime] = Field(sa_column_kwargs=dict(onupdate=func.now()))
