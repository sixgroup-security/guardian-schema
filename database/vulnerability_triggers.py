# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

from sqlalchemy.engine import Connection
from . import (
    DatabaseFunction, DatabaseTrigger, TriggerEventEnum, TriggerWhenEnum, FunctionReturnEnum, FunctionArgument
)

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


class UpdateVulnerabilityIdFunction(DatabaseFunction):
    """
    Helper function that updates the vulnerability ID per report.
    """
    def __init__(self, connection: Connection):
        super().__init__(connection=connection,
                         name="update_vulnerability_ids_for_report",
                         returns=FunctionReturnEnum.void,
                         arguments=[FunctionArgument(name="report", argument_type="uuid"),])

    def _create(self) -> str:
        return """
DECLARE
    v RECORD;
    rank INTEGER;
BEGIN
    rank := 1;
    -- Update vulnerability_id for each vulnerability in the report, ordered by CVSS DESC
    FOR v IN 
        SELECT * FROM vulnerability v1
        INNER JOIN reportsection rs ON v1.report_section_id = rs.id AND rs.report_id = report
        ORDER BY CASE
            WHEN v1.status IN ('final', 'draft', 'review', 'resolved') THEN 10 ELSE 50 END ASC,
            COALESCE(v1.severity, 'low') DESC,
            COALESCE(v1.cvss_score, 0) DESC,
            v1.name ASC
    LOOP
        UPDATE vulnerability
        SET vulnerability_id = rank
        WHERE id = v.id;
        rank := rank + 1;
    END LOOP;
END;
"""


class OnAfterVulnerabilityUpdateInsertDeleteTrigger(DatabaseFunction):
    """
    Creates database triggers and function that updates the vulnerability ID per report. This ensures that all
    vulnerability have a unique ID per report ordered by severity and CVSS score.
    """
    def __init__(self, connection: Connection):
        super().__init__(
            connection=connection,
            name="on_07_after_vulnerability_update_insert_delete",
            returns=FunctionReturnEnum.trigger,
            triggers=[
                DatabaseTrigger(
                    name="on_after_vulnerability_insert",
                    table_name="vulnerability",
                    when=TriggerWhenEnum.after,
                    event=[TriggerEventEnum.insert]
                ),
                DatabaseTrigger(
                    name="on_after_vulnerability_update",
                    table_name="vulnerability",
                    when=TriggerWhenEnum.after,
                    event=[TriggerEventEnum.update],
                    when_clause="OLD.severity IS DISTINCT FROM NEW.severity OR "
                                "OLD.status IS DISTINCT FROM NEW.status OR "
                                "OLD.cvss_score IS DISTINCT FROM NEW.cvss_score OR "
                                "OLD.name IS DISTINCT FROM NEW.name"
                ),
                DatabaseTrigger(
                    name="on_after_vulnerability_delete",
                    table_name="vulnerability",
                    when=TriggerWhenEnum.after,
                    event=[TriggerEventEnum.delete]
                )
            ])

    def _create(self) -> str:
        return """
DECLARE
    result UUID;
    report_section_id UUID;
BEGIN
    IF TG_OP = 'DELETE' THEN
        report_section_id := OLD.report_section_id;
    ELSE
        report_section_id := NEW.report_section_id;
    END IF;

    SELECT r.id INTO result
    FROM report r
    JOIN reportsection rs ON rs.report_id = r.id
    WHERE rs.id = report_section_id;
    
    PERFORM update_vulnerability_ids_for_report(result);
    RETURN NEW;
END;
"""
